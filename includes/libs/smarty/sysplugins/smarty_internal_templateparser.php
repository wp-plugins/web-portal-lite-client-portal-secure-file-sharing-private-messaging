<?php
 class TP_yyToken implements ArrayAccess { public $string = ''; public $metadata = array(); function __construct($s, $m = array()) { if ($s instanceof TP_yyToken) { $this->string = $s->string; $this->metadata = $s->metadata; } else { $this->string = (string) $s; if ($m instanceof TP_yyToken) { $this->metadata = $m->metadata; } elseif (is_array($m)) { $this->metadata = $m; } } } function __toString() { return $this->_string; } function offsetExists($offset) { return isset($this->metadata[$offset]); } function offsetGet($offset) { return $this->metadata[$offset]; } function offsetSet($offset, $value) { if ($offset === null) { if (isset($value[0])) { $x = ($value instanceof TP_yyToken) ? $value->metadata : $value; $this->metadata = array_merge($this->metadata, $x); return; } $offset = count($this->metadata); } if ($value === null) { return; } if ($value instanceof TP_yyToken) { if ($value->metadata) { $this->metadata[$offset] = $value->metadata; } } elseif ($value) { $this->metadata[$offset] = $value; } } function offsetUnset($offset) { unset($this->metadata[$offset]); } } class TP_yyStackEntry { public $stateno; public $major; public $minor; }; class Smarty_Internal_Templateparser{ const Err1 = "Security error: Call to private object member not allowed"; const Err2 = "Security error: Call to dynamic object member not allowed"; const Err3 = "PHP in template not allowed. Use SmartyBC to enable it"; public $successful = true; public $retvalue = 0; private $lex; private $internalError = false; private $strip = false; function __construct($lex, $compiler) { $this->lex = $lex; $this->compiler = $compiler; $this->smarty = $this->compiler->smarty; $this->template = $this->compiler->template; $this->compiler->has_variable_string = false; $this->compiler->prefix_code = array(); $this->prefix_number = 0; $this->block_nesting_level = 0; if ($this->security = isset($this->smarty->security_policy)) { $this->php_handling = $this->smarty->security_policy->php_handling; } else { $this->php_handling = $this->smarty->php_handling; } $this->is_xml = false; $this->asp_tags = (ini_get('asp_tags') != '0'); $this->current_buffer = $this->root_buffer = new _smarty_template_buffer($this); } public static function escape_start_tag($tag_text) { $tag = preg_replace('/\A<\?(.*)\z/', '<<?php ?>?\1', $tag_text, -1 , $count); return $tag; } public static function escape_end_tag($tag_text) { return '?<?php ?>>'; } public function compileVariable($variable) { if (strpos($variable,'(') == 0) { $var = trim($variable,'\''); $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable($var, null, true, false)->nocache; $this->template->properties['variables'][$var] = $this->compiler->tag_nocache|$this->compiler->nocache; } return '$_smarty_tpl->tpl_vars['. $variable .']->value'; } const TP_VERT = 1; const TP_COLON = 2; const TP_COMMENT = 3; const TP_PHPSTARTTAG = 4; const TP_PHPENDTAG = 5; const TP_ASPSTARTTAG = 6; const TP_ASPENDTAG = 7; const TP_FAKEPHPSTARTTAG = 8; const TP_XMLTAG = 9; const TP_TEXT = 10; const TP_STRIPON = 11; const TP_STRIPOFF = 12; const TP_LITERALSTART = 13; const TP_LITERALEND = 14; const TP_LITERAL = 15; const TP_LDEL = 16; const TP_RDEL = 17; const TP_DOLLAR = 18; const TP_ID = 19; const TP_EQUAL = 20; const TP_PTR = 21; const TP_LDELIF = 22; const TP_LDELFOR = 23; const TP_SEMICOLON = 24; const TP_INCDEC = 25; const TP_TO = 26; const TP_STEP = 27; const TP_LDELFOREACH = 28; const TP_SPACE = 29; const TP_AS = 30; const TP_APTR = 31; const TP_LDELSETFILTER = 32; const TP_SMARTYBLOCKCHILD = 33; const TP_LDELSLASH = 34; const TP_ATTR = 35; const TP_INTEGER = 36; const TP_COMMA = 37; const TP_OPENP = 38; const TP_CLOSEP = 39; const TP_MATH = 40; const TP_UNIMATH = 41; const TP_ANDSYM = 42; const TP_ISIN = 43; const TP_ISDIVBY = 44; const TP_ISNOTDIVBY = 45; const TP_ISEVEN = 46; const TP_ISNOTEVEN = 47; const TP_ISEVENBY = 48; const TP_ISNOTEVENBY = 49; const TP_ISODD = 50; const TP_ISNOTODD = 51; const TP_ISODDBY = 52; const TP_ISNOTODDBY = 53; const TP_INSTANCEOF = 54; const TP_QMARK = 55; const TP_NOT = 56; const TP_TYPECAST = 57; const TP_HEX = 58; const TP_DOT = 59; const TP_SINGLEQUOTESTRING = 60; const TP_DOUBLECOLON = 61; const TP_AT = 62; const TP_HATCH = 63; const TP_OPENB = 64; const TP_CLOSEB = 65; const TP_EQUALS = 66; const TP_NOTEQUALS = 67; const TP_GREATERTHAN = 68; const TP_LESSTHAN = 69; const TP_GREATEREQUAL = 70; const TP_LESSEQUAL = 71; const TP_IDENTITY = 72; const TP_NONEIDENTITY = 73; const TP_MOD = 74; const TP_LAND = 75; const TP_LOR = 76; const TP_LXOR = 77; const TP_QUOTE = 78; const TP_BACKTICK = 79; const TP_DOLLARID = 80; const YY_NO_ACTION = 597; const YY_ACCEPT_ACTION = 596; const YY_ERROR_ACTION = 595; const YY_SZ_ACTTAB = 2383; static public $yy_action = array( 225, 275, 263, 276, 259, 257, 260, 390, 356, 359, 353, 193, 18, 127, 42, 317, 381, 351, 196, 350, 6, 108, 24, 98, 128, 190, 134, 318, 41, 41, 249, 329, 231, 18, 43, 43, 317, 26, 298, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 387, 308, 307, 309, 374, 254, 248, 252, 217, 193, 385, 291, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 312, 255, 225, 225, 118, 2, 207, 76, 135, 596, 95, 281, 271, 264, 2, 366, 315, 386, 461, 383, 232, 294, 303, 388, 313, 389, 227, 41, 144, 225, 461, 245, 282, 43, 218, 358, 461, 144, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 105, 177, 522, 46, 46, 41, 19, 522, 143, 297, 325, 43, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 312, 293, 206, 225, 141, 124, 225, 54, 119, 123, 225, 459, 38, 173, 246, 319, 315, 386, 347, 455, 232, 294, 303, 459, 313, 139, 321, 41, 31, 459, 41, 41, 2, 43, 188, 2, 43, 43, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 136, 301, 144, 194, 350, 144, 46, 202, 206, 328, 198, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 21, 9, 28, 185, 41, 318, 225, 265, 271, 264, 43, 206, 27, 173, 206, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 178, 18, 212, 330, 317, 17, 32, 8, 14, 325, 267, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 136, 363, 363, 207, 41, 4, 46, 5, 131, 233, 43, 25, 186, 289, 318, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 100, 161, 18, 355, 361, 317, 26, 109, 360, 346, 325, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 106, 201, 172, 25, 206, 288, 25, 18, 261, 181, 317, 325, 45, 339, 129, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 104, 162, 18, 16, 205, 317, 206, 248, 238, 43, 325, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 255, 354, 243, 229, 206, 342, 18, 239, 242, 241, 248, 266, 300, 330, 240, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 165, 176, 184, 18, 18, 18, 253, 215, 251, 325, 325, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 304, 268, 159, 207, 207, 247, 206, 148, 41, 195, 350, 325, 27, 33, 43, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 163, 225, 328, 199, 133, 29, 187, 23, 250, 325, 101, 225, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 298, 207, 334, 225, 45, 312, 103, 299, 192, 154, 364, 18, 302, 135, 317, 285, 35, 173, 203, 320, 3, 236, 6, 108, 41, 232, 294, 303, 134, 313, 43, 130, 249, 329, 231, 250, 225, 280, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 336, 36, 166, 212, 230, 332, 228, 338, 8, 132, 330, 325, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 312, 345, 37, 362, 141, 312, 94, 77, 135, 156, 236, 182, 173, 135, 122, 204, 315, 386, 365, 225, 232, 294, 303, 137, 313, 232, 294, 303, 125, 313, 41, 222, 333, 180, 277, 337, 43, 225, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 136, 335, 316, 5, 22, 197, 269, 34, 173, 148, 126, 116, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 312, 298, 225, 292, 141, 312, 258, 77, 135, 153, 183, 318, 301, 135, 175, 284, 315, 386, 461, 117, 232, 294, 303, 325, 313, 232, 294, 303, 382, 313, 461, 220, 110, 329, 298, 318, 461, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 30, 191, 46, 189, 314, 107, 329, 329, 146, 97, 102, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 298, 298, 298, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 329, 329, 329, 329, 329, 329, 329, 329, 114, 160, 115, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 298, 298, 298, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 283, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 329, 225, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 200, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 290, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 225, 312, 329, 225, 329, 141, 312, 329, 77, 135, 152, 329, 329, 329, 135, 158, 208, 315, 386, 458, 329, 232, 294, 303, 325, 313, 232, 294, 303, 329, 313, 458, 223, 329, 329, 329, 318, 458, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 225, 329, 329, 46, 329, 329, 329, 329, 329, 329, 329, 329, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 329, 329, 329, 50, 47, 48, 44, 10, 13, 305, 306, 12, 11, 340, 341, 40, 20, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 375, 376, 377, 373, 372, 368, 367, 369, 370, 371, 378, 379, 329, 329, 329, 329, 329, 42, 329, 145, 211, 329, 329, 6, 108, 329, 279, 329, 312, 134, 329, 329, 150, 249, 329, 231, 135, 235, 41, 39, 329, 329, 52, 329, 43, 311, 329, 312, 232, 294, 303, 147, 313, 329, 170, 135, 329, 51, 49, 331, 237, 296, 329, 325, 106, 1, 278, 232, 294, 303, 329, 313, 155, 329, 42, 318, 145, 216, 329, 96, 6, 108, 18, 329, 226, 317, 134, 329, 313, 329, 249, 329, 231, 329, 235, 41, 39, 256, 329, 52, 329, 43, 329, 312, 329, 329, 329, 141, 329, 329, 66, 119, 238, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 270, 329, 329, 42, 329, 140, 92, 329, 96, 6, 108, 18, 41, 169, 317, 134, 329, 273, 43, 249, 329, 231, 325, 235, 41, 39, 244, 329, 52, 41, 43, 329, 312, 329, 318, 43, 141, 329, 329, 67, 135, 225, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 224, 294, 303, 329, 313, 310, 329, 329, 42, 329, 145, 213, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 323, 43, 249, 329, 231, 329, 235, 329, 39, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 46, 329, 86, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 274, 329, 329, 42, 329, 142, 216, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 348, 43, 249, 329, 231, 329, 235, 329, 7, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 90, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 295, 329, 329, 42, 329, 138, 216, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 322, 43, 249, 329, 231, 329, 235, 329, 39, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 87, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 384, 329, 329, 42, 329, 131, 216, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 380, 43, 249, 329, 231, 329, 235, 329, 15, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 79, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 272, 329, 329, 42, 329, 145, 210, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 349, 43, 249, 329, 231, 329, 221, 329, 39, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 70, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 324, 329, 329, 42, 329, 145, 209, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 326, 43, 249, 329, 231, 329, 235, 329, 39, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 74, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 1, 232, 294, 303, 329, 313, 262, 329, 329, 42, 329, 131, 214, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 327, 43, 249, 329, 231, 329, 235, 329, 15, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 141, 329, 329, 53, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 329, 232, 294, 303, 329, 313, 286, 329, 329, 42, 329, 131, 216, 329, 96, 6, 108, 329, 41, 329, 329, 134, 329, 343, 43, 249, 329, 231, 329, 235, 329, 15, 329, 329, 52, 41, 329, 329, 312, 329, 329, 43, 118, 329, 329, 76, 135, 329, 329, 51, 49, 331, 237, 296, 315, 386, 106, 329, 232, 294, 303, 329, 313, 329, 329, 329, 329, 504, 329, 329, 329, 96, 329, 357, 504, 329, 504, 504, 364, 504, 504, 329, 329, 329, 35, 504, 329, 504, 2, 504, 6, 108, 329, 198, 174, 329, 134, 329, 329, 329, 249, 329, 231, 325, 504, 329, 21, 9, 329, 329, 329, 144, 329, 329, 329, 504, 329, 312, 99, 179, 206, 141, 329, 329, 58, 135, 329, 329, 325, 504, 329, 21, 9, 315, 386, 329, 312, 232, 294, 303, 141, 313, 329, 71, 135, 206, 344, 37, 362, 329, 329, 329, 315, 386, 329, 329, 232, 294, 303, 312, 313, 329, 329, 141, 329, 329, 72, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 65, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 329, 232, 294, 303, 329, 313, 329, 329, 312, 198, 167, 329, 141, 329, 329, 69, 135, 329, 329, 325, 329, 329, 21, 9, 315, 386, 329, 329, 232, 294, 303, 312, 313, 329, 329, 141, 206, 329, 85, 135, 329, 312, 329, 329, 329, 149, 329, 315, 386, 135, 312, 232, 294, 303, 141, 313, 329, 81, 135, 329, 329, 232, 294, 303, 329, 313, 315, 386, 329, 329, 232, 294, 303, 312, 313, 329, 329, 141, 329, 329, 82, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 63, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 329, 232, 294, 303, 329, 313, 329, 312, 329, 329, 329, 141, 329, 329, 73, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 83, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 312, 232, 294, 303, 141, 313, 329, 89, 135, 329, 329, 329, 329, 329, 329, 329, 315, 386, 329, 312, 232, 294, 303, 111, 313, 329, 68, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 62, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 329, 232, 294, 303, 329, 313, 329, 312, 329, 329, 329, 141, 329, 329, 61, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 91, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 312, 232, 294, 303, 141, 313, 329, 78, 135, 329, 329, 329, 329, 329, 329, 329, 315, 386, 329, 312, 232, 294, 303, 141, 313, 329, 66, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 80, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 329, 232, 294, 303, 329, 313, 329, 312, 329, 329, 329, 113, 329, 329, 88, 135, 329, 329, 312, 329, 329, 329, 112, 315, 386, 84, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 312, 232, 294, 303, 141, 313, 329, 57, 135, 329, 329, 329, 329, 329, 329, 329, 315, 386, 329, 312, 232, 294, 303, 93, 313, 329, 59, 121, 329, 329, 312, 329, 329, 329, 141, 315, 386, 75, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 329, 232, 294, 303, 329, 313, 329, 312, 329, 329, 329, 141, 329, 329, 60, 135, 329, 329, 312, 329, 329, 329, 141, 315, 386, 64, 135, 232, 294, 303, 329, 313, 329, 329, 315, 386, 329, 312, 232, 294, 303, 120, 313, 329, 55, 135, 329, 329, 329, 329, 329, 329, 329, 315, 386, 329, 312, 232, 294, 303, 93, 313, 329, 56, 121, 225, 329, 312, 329, 198, 164, 157, 315, 386, 329, 135, 219, 294, 303, 325, 313, 352, 21, 9, 287, 234, 329, 232, 294, 303, 329, 313, 329, 41, 329, 329, 206, 312, 329, 43, 329, 151, 2, 329, 329, 135, 329, 329, 329, 329, 329, 329, 329, 198, 168, 329, 329, 232, 294, 303, 329, 313, 329, 325, 329, 144, 21, 9, 198, 171, 329, 329, 329, 329, 329, 329, 329, 329, 325, 329, 206, 21, 9, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 329, 206, ); static public $yy_lookahead = array( 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 98, 16, 19, 17, 17, 113, 114, 22, 23, 16, 97, 18, 19, 28, 112, 29, 29, 32, 33, 34, 16, 35, 35, 19, 20, 112, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 4, 5, 6, 7, 8, 62, 93, 94, 95, 13, 14, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 85, 62, 1, 1, 89, 38, 117, 92, 93, 82, 83, 84, 85, 86, 38, 17, 101, 102, 17, 17, 105, 106, 107, 86, 109, 88, 59, 29, 61, 1, 29, 30, 65, 35, 119, 120, 35, 61, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 90, 91, 59, 54, 54, 29, 16, 64, 18, 19, 100, 35, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 85, 36, 117, 1, 89, 18, 1, 92, 93, 94, 1, 17, 20, 21, 20, 17, 101, 102, 17, 17, 105, 106, 107, 29, 109, 38, 17, 29, 31, 35, 29, 29, 38, 35, 90, 38, 35, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 61, 111, 61, 113, 114, 61, 54, 90, 117, 118, 90, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 103, 104, 27, 110, 29, 112, 1, 84, 85, 86, 35, 117, 20, 21, 117, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 91, 16, 59, 25, 19, 20, 31, 64, 16, 100, 25, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 61, 85, 85, 117, 29, 37, 54, 38, 18, 19, 35, 37, 110, 39, 112, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 90, 91, 16, 65, 79, 19, 20, 121, 122, 122, 100, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 63, 24, 91, 37, 117, 39, 37, 16, 39, 90, 19, 100, 2, 19, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 90, 91, 16, 29, 19, 19, 117, 93, 94, 35, 100, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 62, 79, 96, 62, 117, 17, 16, 18, 19, 19, 93, 94, 19, 25, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 91, 91, 90, 16, 16, 16, 19, 19, 19, 100, 100, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 108, 29, 91, 117, 117, 30, 117, 115, 29, 113, 114, 100, 20, 96, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 91, 1, 118, 99, 18, 26, 110, 20, 2, 100, 97, 1, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 112, 117, 17, 1, 2, 85, 99, 19, 110, 89, 10, 16, 19, 93, 19, 17, 16, 21, 99, 17, 38, 59, 22, 23, 29, 105, 106, 107, 28, 109, 35, 18, 32, 33, 34, 2, 1, 65, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 17, 20, 91, 59, 21, 36, 19, 19, 64, 19, 25, 100, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 85, 78, 79, 80, 89, 85, 19, 92, 93, 89, 59, 63, 21, 93, 19, 17, 101, 102, 17, 1, 105, 106, 107, 18, 109, 105, 106, 107, 18, 109, 29, 116, 36, 63, 19, 17, 35, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 17, 108, 38, 2, 19, 39, 55, 21, 115, 18, 97, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 85, 112, 1, 100, 89, 85, 115, 92, 93, 89, 110, 112, 111, 93, 91, 17, 101, 102, 17, 97, 105, 106, 107, 100, 109, 105, 106, 107, 14, 109, 29, 116, 87, 123, 112, 112, 35, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 110, 54, 110, 114, 110, 123, 123, 97, 97, 97, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 112, 112, 112, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 123, 123, 123, 123, 123, 123, 123, 123, 97, 97, 97, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 112, 112, 112, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 123, 1, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 24, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 1, 85, 123, 1, 123, 89, 85, 123, 92, 93, 89, 123, 123, 123, 93, 91, 17, 101, 102, 17, 123, 105, 106, 107, 100, 109, 105, 106, 107, 123, 109, 29, 116, 123, 123, 123, 112, 35, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 123, 123, 54, 123, 123, 123, 123, 123, 123, 123, 123, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 123, 123, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 123, 123, 123, 123, 123, 16, 123, 18, 19, 123, 123, 22, 23, 123, 17, 123, 85, 28, 123, 123, 89, 32, 33, 34, 93, 36, 29, 38, 123, 123, 41, 123, 35, 102, 123, 85, 105, 106, 107, 89, 109, 123, 91, 93, 123, 56, 57, 58, 59, 60, 123, 100, 63, 64, 65, 105, 106, 107, 123, 109, 93, 123, 16, 112, 18, 19, 123, 78, 22, 23, 16, 123, 105, 19, 28, 123, 109, 123, 32, 33, 34, 123, 36, 29, 38, 31, 123, 41, 123, 35, 123, 85, 123, 123, 123, 89, 123, 123, 92, 93, 94, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 16, 29, 91, 19, 28, 123, 17, 35, 32, 33, 34, 100, 36, 29, 38, 31, 123, 41, 29, 35, 123, 85, 123, 112, 35, 89, 123, 123, 92, 93, 1, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 54, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 64, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 123, 105, 106, 107, 123, 109, 17, 123, 123, 16, 123, 18, 19, 123, 78, 22, 23, 123, 29, 123, 123, 28, 123, 17, 35, 32, 33, 34, 123, 36, 123, 38, 123, 123, 41, 29, 123, 123, 85, 123, 123, 35, 89, 123, 123, 92, 93, 123, 123, 56, 57, 58, 59, 60, 101, 102, 63, 123, 105, 106, 107, 123, 109, 123, 123, 123, 123, 17, 123, 123, 123, 78, 123, 120, 24, 123, 26, 27, 10, 29, 30, 123, 123, 123, 16, 35, 123, 37, 38, 39, 22, 23, 123, 90, 91, 123, 28, 123, 123, 123, 32, 33, 34, 100, 54, 123, 103, 104, 123, 123, 123, 61, 123, 123, 123, 65, 123, 85, 90, 91, 117, 89, 123, 123, 92, 93, 123, 123, 100, 79, 123, 103, 104, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 117, 78, 79, 80, 123, 123, 123, 101, 102, 123, 123, 105, 106, 107, 85, 109, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 123, 105, 106, 107, 123, 109, 123, 123, 85, 90, 91, 123, 89, 123, 123, 92, 93, 123, 123, 100, 123, 123, 103, 104, 101, 102, 123, 123, 105, 106, 107, 85, 109, 123, 123, 89, 117, 123, 92, 93, 123, 85, 123, 123, 123, 89, 123, 101, 102, 93, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 105, 106, 107, 123, 109, 101, 102, 123, 123, 105, 106, 107, 85, 109, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 123, 105, 106, 107, 123, 109, 123, 85, 123, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 123, 123, 123, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 123, 105, 106, 107, 123, 109, 123, 85, 123, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 123, 123, 123, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 123, 105, 106, 107, 123, 109, 123, 85, 123, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 123, 123, 123, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 123, 105, 106, 107, 123, 109, 123, 85, 123, 123, 123, 89, 123, 123, 92, 93, 123, 123, 85, 123, 123, 123, 89, 101, 102, 92, 93, 105, 106, 107, 123, 109, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 123, 123, 123, 123, 123, 123, 123, 101, 102, 123, 85, 105, 106, 107, 89, 109, 123, 92, 93, 1, 123, 85, 123, 90, 91, 89, 101, 102, 123, 93, 105, 106, 107, 100, 109, 17, 103, 104, 102, 21, 123, 105, 106, 107, 123, 109, 123, 29, 123, 123, 117, 85, 123, 35, 123, 89, 38, 123, 123, 93, 123, 123, 123, 123, 123, 123, 123, 90, 91, 123, 123, 105, 106, 107, 123, 109, 123, 100, 123, 61, 103, 104, 90, 91, 123, 123, 123, 123, 123, 123, 123, 123, 100, 123, 117, 103, 104, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 117, ); const YY_SHIFT_USE_DFLT = -5; const YY_SHIFT_MAX = 256; static public $yy_shift_ofst = array( -2, 1271, 1157, 1157, 1271, 1157, 1328, 1328, 1100, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1499, 1157, 1157, 1157, 1157, 1157, 1556, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1385, 1214, 1157, 1157, 1157, 1157, 1157, 1499, 1214, 1157, 1442, 1442, 1613, 1670, 1670, 1670, 1670, 1670, 1670, 206, 153, 76, -1, 259, 259, 259, 809, 939, 755, 862, 702, 649, 365, 312, 418, 495, 572, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 992, 1033, 1033, 2291, 1267, 106, -2, 1745, 1222, 1165, 157, 157, 492, 492, 499, 106, 106, 274, 493, 142, 497, 49, 79, 942, 652, 246, 17, 328, 300, 236, 223, 80, 147, 532, 1227, 353, 353, 353, 422, 407, 142, 353, 353, 610, 353, 341, 565, 379, 353, 380, 142, 408, 160, 409, 353, 379, 409, 353, 472, 613, 472, 472, 472, 472, 472, 472, 613, 472, -5, 1284, 1210, -4, 1108, 0, 156, 575, 1683, 1552, 1512, 1569, 1609, 1666, 1324, 1626, 6, 1495, 1398, 1381, 1341, 1438, 1455, 73, 482, 73, 204, 592, 204, 204, 204, 164, 204, 253, 204, 204, 665, 613, 613, 613, 479, 472, 347, 415, 415, 472, 347, -5, -5, -5, -5, -5, 1727, 149, 45, 120, 152, 54, 530, 54, 314, 252, 378, 306, 459, 258, 303, 239, 331, 522, 536, 469, 537, 539, 569, 534, 544, 561, 525, 518, 570, 593, 612, 578, 628, 591, 579, 510, 584, 589, 458, 435, 352, 485, 478, 451, 479, 490, 383, 618, ); const YY_REDUCE_USE_DFLT = -96; const YY_REDUCE_MAX = 208; static public $yy_reduce_ofst = array( 5, -7, 489, 566, 1630, 856, 70, 1117, 1865, 1854, 1831, 1812, 1891, 1902, 1977, 1951, 1940, 1921, 1789, 1762, 1402, 1345, 1288, 1231, 1459, 1516, 1751, 1728, 1709, 1573, 1988, 2007, 2123, 2149, 2160, 2198, 2179, 1174, 2093, 2026, 2037, 2063, 2112, 2074, 1042, 2209, 1822, 2239, 1061, 861, 494, 417, 571, 2265, 2250, 2206, 1705, 1785, 1680, 1705, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 277, 224, 40, 154, 200, 864, 1062, 170, 330, 574, 1149, 99, 329, 381, 1078, 98, -34, 201, 15, 125, 125, 125, -85, 124, 124, 124, 125, -95, 125, -95, 332, 354, 573, 616, 617, 460, 615, 307, 385, 540, 256, -74, 248, -95, 335, 668, 540, 281, 540, 125, 670, 669, 520, 540, 186, 125, 339, 125, 125, 125, 125, 125, 125, -95, 125, 125, 554, 554, 550, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 542, 554, 554, 554, 554, 554, 554, 595, -33, 551, 552, -33, 552, 552, 552, -33, 552, 597, 552, 552, 596, 594, 594, 594, 599, -33, 356, 296, 360, -33, 356, 395, 404, 376, 416, 368, ); static public $yyExpectedTokens = array( array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 23, 28, 32, 33, 34, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 65, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 64, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(16, 18, 19, 22, 23, 28, 32, 33, 34, 36, 38, 41, 56, 57, 58, 59, 60, 63, 78, ), array(1, 27, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 29, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 24, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, ), array(1, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, ), array(1, 17, 21, 29, 35, 38, 61, ), array(1, 17, 29, 35, 54, ), array(1, 29, 35, ), array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 22, 23, 28, 32, 33, 34, ), array(10, 16, 22, 23, 28, 32, 33, 34, 78, 79, 80, ), array(16, 19, 29, 31, 35, ), array(16, 19, 29, 31, 35, ), array(1, 17, 29, 35, ), array(1, 17, 29, 35, ), array(16, 19, 29, 35, ), array(16, 19, 29, 35, ), array(1, 2, 17, ), array(1, 29, 35, ), array(1, 29, 35, ), array(18, 19, 63, ), array(21, 59, 64, ), array(18, 38, ), array(10, 16, 22, 23, 28, 32, 33, 34, 78, 79, 80, ), array(4, 5, 6, 7, 8, 13, 14, 15, ), array(1, 17, 29, 30, 35, 54, ), array(1, 17, 29, 35, 54, ), array(1, 17, 29, 35, 54, ), array(16, 19, 20, 25, ), array(16, 19, 20, 62, ), array(16, 19, 62, ), array(16, 19, 20, ), array(1, 31, 54, ), array(20, 21, 61, ), array(1, 17, 54, ), array(20, 21, 61, ), array(1, 17, 21, ), array(17, 29, 35, ), array(16, 19, ), array(16, 19, ), array(16, 19, ), array(29, 35, ), array(16, 19, ), array(18, 38, ), array(16, 19, ), array(16, 19, ), array(1, 17, ), array(16, 19, ), array(29, 35, ), array(21, 61, ), array(18, 19, ), array(16, 19, ), array(16, 19, ), array(18, 38, ), array(16, 19, ), array(1, 54, ), array(16, 19, ), array(16, 19, ), array(18, 19, ), array(16, 19, ), array(16, 19, ), array(1, ), array(21, ), array(1, ), array(1, ), array(1, ), array(1, ), array(1, ), array(1, ), array(21, ), array(1, ), array(), array(17, 29, 35, ), array(17, 29, 35, ), array(16, 19, 62, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(16, 18, 19, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(17, 29, 35, ), array(59, 64, ), array(1, 17, ), array(59, 64, ), array(59, 64, ), array(1, 17, ), array(59, 64, ), array(59, 64, ), array(59, 64, ), array(1, 17, ), array(59, 64, ), array(16, 38, ), array(59, 64, ), array(59, 64, ), array(14, ), array(21, ), array(21, ), array(21, ), array(38, ), array(1, ), array(2, ), array(29, ), array(29, ), array(1, ), array(2, ), array(), array(), array(), array(), array(), array(17, 24, 26, 27, 29, 30, 35, 37, 38, 39, 54, 61, 65, 79, ), array(17, 20, 29, 35, 38, 61, ), array(38, 59, 61, 65, ), array(16, 18, 19, 36, ), array(31, 38, 61, ), array(38, 61, ), array(2, 20, ), array(38, 61, ), array(24, 37, ), array(37, 65, ), array(17, 25, ), array(37, 39, ), array(20, 59, ), array(37, 39, ), array(37, 39, ), array(25, 79, ), array(19, 62, ), array(63, ), array(19, ), array(65, ), array(19, ), array(19, ), array(19, ), array(25, ), array(63, ), array(19, ), array(59, ), array(36, ), array(36, ), array(39, ), array(19, ), array(55, ), array(2, ), array(38, ), array(18, ), array(18, ), array(18, ), array(19, ), array(18, ), array(20, ), array(19, ), array(19, ), array(2, ), array(26, ), array(38, ), array(19, ), array(19, ), array(18, ), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), ); static public $yy_default = array( 394, 578, 549, 549, 595, 549, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 455, 595, 595, 595, 455, 455, 455, 595, 595, 595, 595, 595, 595, 595, 595, 460, 595, 595, 466, 465, 484, 547, 579, 581, 548, 580, 489, 488, 480, 479, 481, 457, 485, 462, 476, 460, 437, 492, 493, 504, 468, 455, 391, 595, 455, 455, 475, 512, 455, 455, 595, 455, 455, 595, 561, 595, 595, 595, 468, 468, 468, 595, 522, 522, 522, 468, 513, 468, 513, 595, 595, 595, 595, 595, 455, 595, 595, 595, 595, 595, 595, 455, 513, 595, 595, 595, 595, 595, 468, 595, 595, 595, 595, 522, 473, 558, 491, 478, 472, 497, 495, 496, 513, 471, 556, 595, 595, 523, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 516, 595, 518, 519, 595, 520, 540, 542, 595, 539, 522, 517, 541, 410, 562, 559, 536, 522, 475, 551, 594, 594, 512, 550, 522, 555, 555, 555, 522, 470, 504, 504, 595, 504, 490, 534, 504, 595, 595, 494, 595, 500, 595, 595, 494, 595, 595, 595, 595, 595, 595, 595, 494, 595, 595, 500, 502, 595, 595, 595, 506, 534, 560, 595, 595, 595, 595, 595, 595, 595, 595, 534, 463, 534, 595, 595, 595, 401, 543, 400, 402, 546, 445, 398, 397, 393, 464, 438, 593, 467, 435, 395, 440, 434, 439, 396, 399, 456, 531, 420, 529, 392, 528, 506, 527, 535, 444, 557, 545, 544, 530, 412, 453, 526, 505, 419, 507, 525, 532, 470, 514, 521, 524, 508, 510, 482, 483, 416, 415, 417, 418, 477, 511, 515, 538, 469, 509, 534, 533, 432, 446, 447, 443, 442, 436, 454, 433, 441, 554, 448, 498, 499, 501, 503, 452, 451, 449, 450, 552, 553, 486, 487, 589, 430, 582, 583, 584, 431, 429, 426, 537, 427, 428, 406, 587, 575, 404, 577, 576, 405, 585, 586, 588, 591, 592, 425, 424, 569, 568, 570, 571, 572, 567, 566, 414, 563, 564, 565, 573, 574, 422, 590, 407, 423, 421, 408, 474, 413, 411, 409, 403, ); const YYNOCODE = 124; const YYSTACKDEPTH = 100; const YYNSTATE = 391; const YYNRULE = 204; const YYERRORSYMBOL = 81; const YYERRSYMDT = 'yy0'; const YYFALLBACK = 0; static public $yyFallback = array( ); static function Trace($TraceFILE, $zTracePrompt) { if (!$TraceFILE) { $zTracePrompt = 0; } elseif (!$zTracePrompt) { $TraceFILE = 0; } self::$yyTraceFILE = $TraceFILE; self::$yyTracePrompt = $zTracePrompt; } static function PrintTrace() { self::$yyTraceFILE = fopen('php://output', 'w'); self::$yyTracePrompt = '<br>'; } static public $yyTraceFILE; static public $yyTracePrompt; public $yyidx; public $yyerrcnt; public $yystack = array(); public $yyTokenName = array( '$', 'VERT', 'COLON', 'COMMENT', 'PHPSTARTTAG', 'PHPENDTAG', 'ASPSTARTTAG', 'ASPENDTAG', 'FAKEPHPSTARTTAG', 'XMLTAG', 'TEXT', 'STRIPON', 'STRIPOFF', 'LITERALSTART', 'LITERALEND', 'LITERAL', 'LDEL', 'RDEL', 'DOLLAR', 'ID', 'EQUAL', 'PTR', 'LDELIF', 'LDELFOR', 'SEMICOLON', 'INCDEC', 'TO', 'STEP', 'LDELFOREACH', 'SPACE', 'AS', 'APTR', 'LDELSETFILTER', 'SMARTYBLOCKCHILD', 'LDELSLASH', 'ATTR', 'INTEGER', 'COMMA', 'OPENP', 'CLOSEP', 'MATH', 'UNIMATH', 'ANDSYM', 'ISIN', 'ISDIVBY', 'ISNOTDIVBY', 'ISEVEN', 'ISNOTEVEN', 'ISEVENBY', 'ISNOTEVENBY', 'ISODD', 'ISNOTODD', 'ISODDBY', 'ISNOTODDBY', 'INSTANCEOF', 'QMARK', 'NOT', 'TYPECAST', 'HEX', 'DOT', 'SINGLEQUOTESTRING', 'DOUBLECOLON', 'AT', 'HATCH', 'OPENB', 'CLOSEB', 'EQUALS', 'NOTEQUALS', 'GREATERTHAN', 'LESSTHAN', 'GREATEREQUAL', 'LESSEQUAL', 'IDENTITY', 'NONEIDENTITY', 'MOD', 'LAND', 'LOR', 'LXOR', 'QUOTE', 'BACKTICK', 'DOLLARID', 'error', 'start', 'template', 'template_element', 'smartytag', 'literal', 'literal_elements', 'literal_element', 'value', 'modifierlist', 'attributes', 'expr', 'varindexed', 'statement', 'statements', 'optspace', 'varvar', 'foraction', 'modparameters', 'attribute', 'ternary', 'array', 'ifcond', 'lop', 'variable', 'function', 'doublequoted_with_quotes', 'static_class_access', 'object', 'arrayindex', 'indexdef', 'varvarele', 'objectchain', 'objectelement', 'method', 'params', 'modifier', 'modparameter', 'arrayelements', 'arrayelement', 'doublequoted', 'doublequotedcontent', ); static public $yyRuleName = array( "start ::= template", "template ::= template_element", "template ::= template template_element", "template ::=", "template_element ::= smartytag", "template_element ::= COMMENT", "template_element ::= literal", "template_element ::= PHPSTARTTAG", "template_element ::= PHPENDTAG", "template_element ::= ASPSTARTTAG", "template_element ::= ASPENDTAG", "template_element ::= FAKEPHPSTARTTAG", "template_element ::= XMLTAG", "template_element ::= TEXT", "template_element ::= STRIPON", "template_element ::= STRIPOFF", "literal ::= LITERALSTART LITERALEND", "literal ::= LITERALSTART literal_elements LITERALEND", "literal_elements ::= literal_elements literal_element", "literal_elements ::=", "literal_element ::= literal", "literal_element ::= LITERAL", "literal_element ::= PHPSTARTTAG", "literal_element ::= FAKEPHPSTARTTAG", "literal_element ::= PHPENDTAG", "literal_element ::= ASPSTARTTAG", "literal_element ::= ASPENDTAG", "smartytag ::= LDEL value RDEL", "smartytag ::= LDEL value modifierlist attributes RDEL", "smartytag ::= LDEL value attributes RDEL", "smartytag ::= LDEL expr modifierlist attributes RDEL", "smartytag ::= LDEL expr attributes RDEL", "smartytag ::= LDEL DOLLAR ID EQUAL value RDEL", "smartytag ::= LDEL DOLLAR ID EQUAL expr RDEL", "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes RDEL", "smartytag ::= LDEL varindexed EQUAL expr attributes RDEL", "smartytag ::= LDEL ID attributes RDEL", "smartytag ::= LDEL ID RDEL", "smartytag ::= LDEL ID PTR ID attributes RDEL", "smartytag ::= LDEL ID modifierlist attributes RDEL", "smartytag ::= LDEL ID PTR ID modifierlist attributes RDEL", "smartytag ::= LDELIF expr RDEL", "smartytag ::= LDELIF expr attributes RDEL", "smartytag ::= LDELIF statement RDEL", "smartytag ::= LDELIF statement attributes RDEL", "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes RDEL", "foraction ::= EQUAL expr", "foraction ::= INCDEC", "smartytag ::= LDELFOR statement TO expr attributes RDEL", "smartytag ::= LDELFOR statement TO expr STEP expr attributes RDEL", "smartytag ::= LDELFOREACH attributes RDEL", "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes RDEL", "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes RDEL", "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes RDEL", "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes RDEL", "smartytag ::= LDELSETFILTER ID modparameters RDEL", "smartytag ::= LDELSETFILTER ID modparameters modifierlist RDEL", "smartytag ::= SMARTYBLOCKCHILD", "smartytag ::= LDELSLASH ID RDEL", "smartytag ::= LDELSLASH ID modifierlist RDEL", "smartytag ::= LDELSLASH ID PTR ID RDEL", "smartytag ::= LDELSLASH ID PTR ID modifierlist RDEL", "attributes ::= attributes attribute", "attributes ::= attribute", "attributes ::=", "attribute ::= SPACE ID EQUAL ID", "attribute ::= ATTR expr", "attribute ::= ATTR value", "attribute ::= SPACE ID", "attribute ::= SPACE expr", "attribute ::= SPACE value", "attribute ::= SPACE INTEGER EQUAL expr", "statements ::= statement", "statements ::= statements COMMA statement", "statement ::= DOLLAR varvar EQUAL expr", "statement ::= varindexed EQUAL expr", "statement ::= OPENP statement CLOSEP", "expr ::= value", "expr ::= ternary", "expr ::= DOLLAR ID COLON ID", "expr ::= expr MATH value", "expr ::= expr UNIMATH value", "expr ::= expr ANDSYM value", "expr ::= array", "expr ::= expr modifierlist", "expr ::= expr ifcond expr", "expr ::= expr ISIN array", "expr ::= expr ISIN value", "expr ::= expr lop expr", "expr ::= expr ISDIVBY expr", "expr ::= expr ISNOTDIVBY expr", "expr ::= expr ISEVEN", "expr ::= expr ISNOTEVEN", "expr ::= expr ISEVENBY expr", "expr ::= expr ISNOTEVENBY expr", "expr ::= expr ISODD", "expr ::= expr ISNOTODD", "expr ::= expr ISODDBY expr", "expr ::= expr ISNOTODDBY expr", "expr ::= value INSTANCEOF ID", "expr ::= value INSTANCEOF value", "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr", "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr", "value ::= variable", "value ::= UNIMATH value", "value ::= NOT value", "value ::= TYPECAST value", "value ::= variable INCDEC", "value ::= HEX", "value ::= INTEGER", "value ::= INTEGER DOT INTEGER", "value ::= INTEGER DOT", "value ::= DOT INTEGER", "value ::= ID", "value ::= function", "value ::= OPENP expr CLOSEP", "value ::= SINGLEQUOTESTRING", "value ::= doublequoted_with_quotes", "value ::= ID DOUBLECOLON static_class_access", "value ::= varindexed DOUBLECOLON static_class_access", "value ::= smartytag", "value ::= value modifierlist", "variable ::= varindexed", "variable ::= DOLLAR varvar AT ID", "variable ::= object", "variable ::= HATCH ID HATCH", "variable ::= HATCH ID HATCH arrayindex", "variable ::= HATCH variable HATCH", "variable ::= HATCH variable HATCH arrayindex", "varindexed ::= DOLLAR varvar arrayindex", "arrayindex ::= arrayindex indexdef", "arrayindex ::=", "indexdef ::= DOT DOLLAR varvar", "indexdef ::= DOT DOLLAR varvar AT ID", "indexdef ::= DOT ID", "indexdef ::= DOT INTEGER", "indexdef ::= DOT LDEL expr RDEL", "indexdef ::= OPENB ID CLOSEB", "indexdef ::= OPENB ID DOT ID CLOSEB", "indexdef ::= OPENB expr CLOSEB", "indexdef ::= OPENB CLOSEB", "varvar ::= varvarele", "varvar ::= varvar varvarele", "varvarele ::= ID", "varvarele ::= LDEL expr RDEL", "object ::= varindexed objectchain", "objectchain ::= objectelement", "objectchain ::= objectchain objectelement", "objectelement ::= PTR ID arrayindex", "objectelement ::= PTR DOLLAR varvar arrayindex", "objectelement ::= PTR LDEL expr RDEL arrayindex", "objectelement ::= PTR ID LDEL expr RDEL arrayindex", "objectelement ::= PTR method", "function ::= ID OPENP params CLOSEP", "method ::= ID OPENP params CLOSEP", "method ::= DOLLAR ID OPENP params CLOSEP", "params ::= params COMMA expr", "params ::= expr", "params ::=", "modifierlist ::= modifierlist modifier modparameters", "modifierlist ::= modifier modparameters", "modifier ::= VERT AT ID", "modifier ::= VERT ID", "modparameters ::= modparameters modparameter", "modparameters ::=", "modparameter ::= COLON value", "modparameter ::= COLON array", "static_class_access ::= method", "static_class_access ::= method objectchain", "static_class_access ::= ID", "static_class_access ::= DOLLAR ID arrayindex", "static_class_access ::= DOLLAR ID arrayindex objectchain", "ifcond ::= EQUALS", "ifcond ::= NOTEQUALS", "ifcond ::= GREATERTHAN", "ifcond ::= LESSTHAN", "ifcond ::= GREATEREQUAL", "ifcond ::= LESSEQUAL", "ifcond ::= IDENTITY", "ifcond ::= NONEIDENTITY", "ifcond ::= MOD", "lop ::= LAND", "lop ::= LOR", "lop ::= LXOR", "array ::= OPENB arrayelements CLOSEB", "arrayelements ::= arrayelement", "arrayelements ::= arrayelements COMMA arrayelement", "arrayelements ::=", "arrayelement ::= value APTR expr", "arrayelement ::= ID APTR expr", "arrayelement ::= expr", "doublequoted_with_quotes ::= QUOTE QUOTE", "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE", "doublequoted ::= doublequoted doublequotedcontent", "doublequoted ::= doublequotedcontent", "doublequotedcontent ::= BACKTICK variable BACKTICK", "doublequotedcontent ::= BACKTICK expr BACKTICK", "doublequotedcontent ::= DOLLARID", "doublequotedcontent ::= LDEL variable RDEL", "doublequotedcontent ::= LDEL expr RDEL", "doublequotedcontent ::= smartytag", "doublequotedcontent ::= TEXT", "optspace ::= SPACE", "optspace ::=", ); function tokenName($tokenType) { if ($tokenType === 0) { return 'End of Input'; } if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) { return $this->yyTokenName[$tokenType]; } else { return "Unknown"; } } static function yy_destructor($yymajor, $yypminor) { switch ($yymajor) { default: break; } } function yy_pop_parser_stack() { if (!count($this->yystack)) { return; } $yytos = array_pop($this->yystack); if (self::$yyTraceFILE && $this->yyidx >= 0) { fwrite(self::$yyTraceFILE, self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] . "\n"); } $yymajor = $yytos->major; self::yy_destructor($yymajor, $yytos->minor); $this->yyidx--; return $yymajor; } function __destruct() { while ($this->yystack !== Array()) { $this->yy_pop_parser_stack(); } if (is_resource(self::$yyTraceFILE)) { fclose(self::$yyTraceFILE); } } function yy_get_expected_tokens($token) { $state = $this->yystack[$this->yyidx]->stateno; $expected = self::$yyExpectedTokens[$state]; if (in_array($token, self::$yyExpectedTokens[$state], true)) { return $expected; } $stack = $this->yystack; $yyidx = $this->yyidx; do { $yyact = $this->yy_find_shift_action($token); if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) { $done = 0; do { if ($done++ == 100) { $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } $yyruleno = $yyact - self::YYNSTATE; $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs']; $nextstate = $this->yy_find_reduce_action( $this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno]['lhs']); if (isset(self::$yyExpectedTokens[$nextstate])) { $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]); if (in_array($token, self::$yyExpectedTokens[$nextstate], true)) { $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } } if ($nextstate < self::YYNSTATE) { $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $nextstate; $x->major = self::$yyRuleInfo[$yyruleno]['lhs']; $this->yystack[$this->yyidx] = $x; continue 2; } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) { $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } elseif ($nextstate === self::YY_NO_ACTION) { $this->yyidx = $yyidx; $this->yystack = $stack; return $expected; } else { $yyact = $nextstate; } } while (true); } break; } while (true); $this->yyidx = $yyidx; $this->yystack = $stack; return array_unique($expected); } function yy_is_expected_token($token) { if ($token === 0) { return true; } $state = $this->yystack[$this->yyidx]->stateno; if (in_array($token, self::$yyExpectedTokens[$state], true)) { return true; } $stack = $this->yystack; $yyidx = $this->yyidx; do { $yyact = $this->yy_find_shift_action($token); if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) { $done = 0; do { if ($done++ == 100) { $this->yyidx = $yyidx; $this->yystack = $stack; return true; } $yyruleno = $yyact - self::YYNSTATE; $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs']; $nextstate = $this->yy_find_reduce_action( $this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno]['lhs']); if (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true)) { $this->yyidx = $yyidx; $this->yystack = $stack; return true; } if ($nextstate < self::YYNSTATE) { $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $nextstate; $x->major = self::$yyRuleInfo[$yyruleno]['lhs']; $this->yystack[$this->yyidx] = $x; continue 2; } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) { $this->yyidx = $yyidx; $this->yystack = $stack; if (!$token) { return true; } return false; } elseif ($nextstate === self::YY_NO_ACTION) { $this->yyidx = $yyidx; $this->yystack = $stack; return true; } else { $yyact = $nextstate; } } while (true); } break; } while (true); $this->yyidx = $yyidx; $this->yystack = $stack; return true; } function yy_find_shift_action($iLookAhead) { $stateno = $this->yystack[$this->yyidx]->stateno; if (!isset(self::$yy_shift_ofst[$stateno])) { return self::$yy_default[$stateno]; } $i = self::$yy_shift_ofst[$stateno]; if ($i === self::YY_SHIFT_USE_DFLT) { return self::$yy_default[$stateno]; } if ($iLookAhead == self::YYNOCODE) { return self::YY_NO_ACTION; } $i += $iLookAhead; if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) { if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) { if (self::$yyTraceFILE) { fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " . $this->yyTokenName[$iLookAhead] . " => " . $this->yyTokenName[$iFallback] . "\n"); } return $this->yy_find_shift_action($iFallback); } return self::$yy_default[$stateno]; } else { return self::$yy_action[$i]; } } function yy_find_reduce_action($stateno, $iLookAhead) { if (!isset(self::$yy_reduce_ofst[$stateno])) { return self::$yy_default[$stateno]; } $i = self::$yy_reduce_ofst[$stateno]; if ($i == self::YY_REDUCE_USE_DFLT) { return self::$yy_default[$stateno]; } if ($iLookAhead == self::YYNOCODE) { return self::YY_NO_ACTION; } $i += $iLookAhead; if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) { return self::$yy_default[$stateno]; } else { return self::$yy_action[$i]; } } function yy_shift($yyNewState, $yyMajor, $yypMinor) { $this->yyidx++; if ($this->yyidx >= self::YYSTACKDEPTH) { $this->yyidx--; if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $this->yy_pop_parser_stack(); } $this->internalError = true; $this->compiler->trigger_template_error("Stack overflow in template parser"); return; } $yytos = new TP_yyStackEntry; $yytos->stateno = $yyNewState; $yytos->major = $yyMajor; $yytos->minor = $yypMinor; array_push($this->yystack, $yytos); if (self::$yyTraceFILE && $this->yyidx > 0) { fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt, $yyNewState); fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt); for($i = 1; $i <= $this->yyidx; $i++) { fprintf(self::$yyTraceFILE, " %s", $this->yyTokenName[$this->yystack[$i]->major]); } fwrite(self::$yyTraceFILE,"\n"); } } static public $yyRuleInfo = array( array( 'lhs' => 82, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 1 ), array( 'lhs' => 83, 'rhs' => 2 ), array( 'lhs' => 83, 'rhs' => 0 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 84, 'rhs' => 1 ), array( 'lhs' => 86, 'rhs' => 2 ), array( 'lhs' => 86, 'rhs' => 3 ), array( 'lhs' => 87, 'rhs' => 2 ), array( 'lhs' => 87, 'rhs' => 0 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 88, 'rhs' => 1 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 5 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 5 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 85, 'rhs' => 7 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 85, 'rhs' => 5 ), array( 'lhs' => 85, 'rhs' => 7 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 12 ), array( 'lhs' => 98, 'rhs' => 2 ), array( 'lhs' => 98, 'rhs' => 1 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 85, 'rhs' => 8 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 8 ), array( 'lhs' => 85, 'rhs' => 11 ), array( 'lhs' => 85, 'rhs' => 8 ), array( 'lhs' => 85, 'rhs' => 11 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 5 ), array( 'lhs' => 85, 'rhs' => 1 ), array( 'lhs' => 85, 'rhs' => 3 ), array( 'lhs' => 85, 'rhs' => 4 ), array( 'lhs' => 85, 'rhs' => 5 ), array( 'lhs' => 85, 'rhs' => 6 ), array( 'lhs' => 91, 'rhs' => 2 ), array( 'lhs' => 91, 'rhs' => 1 ), array( 'lhs' => 91, 'rhs' => 0 ), array( 'lhs' => 100, 'rhs' => 4 ), array( 'lhs' => 100, 'rhs' => 2 ), array( 'lhs' => 100, 'rhs' => 2 ), array( 'lhs' => 100, 'rhs' => 2 ), array( 'lhs' => 100, 'rhs' => 2 ), array( 'lhs' => 100, 'rhs' => 2 ), array( 'lhs' => 100, 'rhs' => 4 ), array( 'lhs' => 95, 'rhs' => 1 ), array( 'lhs' => 95, 'rhs' => 3 ), array( 'lhs' => 94, 'rhs' => 4 ), array( 'lhs' => 94, 'rhs' => 3 ), array( 'lhs' => 94, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 1 ), array( 'lhs' => 92, 'rhs' => 1 ), array( 'lhs' => 92, 'rhs' => 4 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 1 ), array( 'lhs' => 92, 'rhs' => 2 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 2 ), array( 'lhs' => 92, 'rhs' => 2 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 2 ), array( 'lhs' => 92, 'rhs' => 2 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 92, 'rhs' => 3 ), array( 'lhs' => 101, 'rhs' => 8 ), array( 'lhs' => 101, 'rhs' => 7 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 3 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 3 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 3 ), array( 'lhs' => 89, 'rhs' => 3 ), array( 'lhs' => 89, 'rhs' => 1 ), array( 'lhs' => 89, 'rhs' => 2 ), array( 'lhs' => 105, 'rhs' => 1 ), array( 'lhs' => 105, 'rhs' => 4 ), array( 'lhs' => 105, 'rhs' => 1 ), array( 'lhs' => 105, 'rhs' => 3 ), array( 'lhs' => 105, 'rhs' => 4 ), array( 'lhs' => 105, 'rhs' => 3 ), array( 'lhs' => 105, 'rhs' => 4 ), array( 'lhs' => 93, 'rhs' => 3 ), array( 'lhs' => 110, 'rhs' => 2 ), array( 'lhs' => 110, 'rhs' => 0 ), array( 'lhs' => 111, 'rhs' => 3 ), array( 'lhs' => 111, 'rhs' => 5 ), array( 'lhs' => 111, 'rhs' => 2 ), array( 'lhs' => 111, 'rhs' => 2 ), array( 'lhs' => 111, 'rhs' => 4 ), array( 'lhs' => 111, 'rhs' => 3 ), array( 'lhs' => 111, 'rhs' => 5 ), array( 'lhs' => 111, 'rhs' => 3 ), array( 'lhs' => 111, 'rhs' => 2 ), array( 'lhs' => 97, 'rhs' => 1 ), array( 'lhs' => 97, 'rhs' => 2 ), array( 'lhs' => 112, 'rhs' => 1 ), array( 'lhs' => 112, 'rhs' => 3 ), array( 'lhs' => 109, 'rhs' => 2 ), array( 'lhs' => 113, 'rhs' => 1 ), array( 'lhs' => 113, 'rhs' => 2 ), array( 'lhs' => 114, 'rhs' => 3 ), array( 'lhs' => 114, 'rhs' => 4 ), array( 'lhs' => 114, 'rhs' => 5 ), array( 'lhs' => 114, 'rhs' => 6 ), array( 'lhs' => 114, 'rhs' => 2 ), array( 'lhs' => 106, 'rhs' => 4 ), array( 'lhs' => 115, 'rhs' => 4 ), array( 'lhs' => 115, 'rhs' => 5 ), array( 'lhs' => 116, 'rhs' => 3 ), array( 'lhs' => 116, 'rhs' => 1 ), array( 'lhs' => 116, 'rhs' => 0 ), array( 'lhs' => 90, 'rhs' => 3 ), array( 'lhs' => 90, 'rhs' => 2 ), array( 'lhs' => 117, 'rhs' => 3 ), array( 'lhs' => 117, 'rhs' => 2 ), array( 'lhs' => 99, 'rhs' => 2 ), array( 'lhs' => 99, 'rhs' => 0 ), array( 'lhs' => 118, 'rhs' => 2 ), array( 'lhs' => 118, 'rhs' => 2 ), array( 'lhs' => 108, 'rhs' => 1 ), array( 'lhs' => 108, 'rhs' => 2 ), array( 'lhs' => 108, 'rhs' => 1 ), array( 'lhs' => 108, 'rhs' => 3 ), array( 'lhs' => 108, 'rhs' => 4 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 103, 'rhs' => 1 ), array( 'lhs' => 104, 'rhs' => 1 ), array( 'lhs' => 104, 'rhs' => 1 ), array( 'lhs' => 104, 'rhs' => 1 ), array( 'lhs' => 102, 'rhs' => 3 ), array( 'lhs' => 119, 'rhs' => 1 ), array( 'lhs' => 119, 'rhs' => 3 ), array( 'lhs' => 119, 'rhs' => 0 ), array( 'lhs' => 120, 'rhs' => 3 ), array( 'lhs' => 120, 'rhs' => 3 ), array( 'lhs' => 120, 'rhs' => 1 ), array( 'lhs' => 107, 'rhs' => 2 ), array( 'lhs' => 107, 'rhs' => 3 ), array( 'lhs' => 121, 'rhs' => 2 ), array( 'lhs' => 121, 'rhs' => 1 ), array( 'lhs' => 122, 'rhs' => 3 ), array( 'lhs' => 122, 'rhs' => 3 ), array( 'lhs' => 122, 'rhs' => 1 ), array( 'lhs' => 122, 'rhs' => 3 ), array( 'lhs' => 122, 'rhs' => 3 ), array( 'lhs' => 122, 'rhs' => 1 ), array( 'lhs' => 122, 'rhs' => 1 ), array( 'lhs' => 96, 'rhs' => 1 ), array( 'lhs' => 96, 'rhs' => 0 ), ); static public $yyReduceMap = array( 0 => 0, 1 => 1, 2 => 1, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 16 => 16, 19 => 16, 203 => 16, 17 => 17, 76 => 17, 18 => 18, 104 => 18, 106 => 18, 107 => 18, 130 => 18, 168 => 18, 20 => 20, 21 => 20, 47 => 20, 69 => 20, 70 => 20, 77 => 20, 78 => 20, 83 => 20, 103 => 20, 108 => 20, 109 => 20, 114 => 20, 116 => 20, 117 => 20, 124 => 20, 141 => 20, 167 => 20, 169 => 20, 185 => 20, 190 => 20, 202 => 20, 22 => 22, 23 => 22, 24 => 24, 25 => 25, 26 => 26, 27 => 27, 28 => 28, 29 => 29, 31 => 29, 30 => 30, 32 => 32, 33 => 32, 34 => 34, 35 => 35, 36 => 36, 37 => 37, 38 => 38, 39 => 39, 40 => 40, 41 => 41, 42 => 42, 44 => 42, 43 => 43, 45 => 45, 46 => 46, 48 => 48, 49 => 49, 50 => 50, 51 => 51, 52 => 52, 53 => 53, 54 => 54, 55 => 55, 56 => 56, 57 => 57, 58 => 58, 59 => 59, 60 => 60, 61 => 61, 62 => 62, 63 => 63, 72 => 63, 157 => 63, 161 => 63, 165 => 63, 166 => 63, 64 => 64, 158 => 64, 164 => 64, 65 => 65, 66 => 66, 67 => 66, 68 => 68, 71 => 71, 73 => 73, 74 => 74, 75 => 74, 79 => 79, 80 => 80, 81 => 80, 82 => 80, 84 => 84, 121 => 84, 85 => 85, 88 => 85, 99 => 85, 86 => 86, 87 => 87, 89 => 89, 90 => 90, 91 => 91, 96 => 91, 92 => 92, 95 => 92, 93 => 93, 98 => 93, 94 => 94, 97 => 94, 100 => 100, 101 => 101, 102 => 102, 105 => 105, 110 => 110, 111 => 111, 112 => 112, 113 => 113, 115 => 115, 118 => 118, 119 => 119, 120 => 120, 122 => 122, 123 => 123, 125 => 125, 126 => 126, 127 => 127, 128 => 128, 129 => 129, 131 => 131, 187 => 131, 132 => 132, 133 => 133, 134 => 134, 135 => 135, 136 => 136, 139 => 136, 137 => 137, 138 => 138, 140 => 140, 142 => 142, 143 => 143, 144 => 144, 145 => 145, 146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151, 152 => 152, 153 => 153, 154 => 154, 155 => 155, 156 => 156, 159 => 159, 160 => 160, 162 => 162, 163 => 163, 170 => 170, 171 => 171, 172 => 172, 173 => 173, 174 => 174, 175 => 175, 176 => 176, 177 => 177, 178 => 178, 179 => 179, 180 => 180, 181 => 181, 182 => 182, 183 => 183, 184 => 184, 186 => 186, 188 => 188, 189 => 189, 191 => 191, 192 => 192, 193 => 193, 194 => 194, 195 => 195, 196 => 195, 198 => 195, 197 => 197, 199 => 199, 200 => 200, 201 => 201, ); function yy_r0(){ $this->_retvalue = $this->root_buffer->to_smarty_php(); } function yy_r1(){ $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor); } function yy_r4(){ if ($this->compiler->has_code) { $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array(); $this->_retvalue = new _smarty_tag($this, $this->compiler->processNocacheCode($tmp.$this->yystack[$this->yyidx + 0]->minor,true)); } else { $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + 0]->minor); } $this->compiler->has_variable_string = false; $this->block_nesting_level = count($this->compiler->_tag_stack); } function yy_r5(){ $this->_retvalue = new _smarty_tag($this, ''); } function yy_r6(){ $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor); } function yy_r7(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor)); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars($this->yystack[$this->yyidx + 0]->minor, ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if (!($this->smarty instanceof SmartyBC)) { $this->compiler->trigger_template_error (self::Err3); } $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('<?php', true)); } elseif ($this->php_handling == Smarty::PHP_REMOVE) { $this->_retvalue = new _smarty_text($this, ''); } } function yy_r8(){ if ($this->is_xml) { $this->compiler->tag_nocache = true; $this->is_xml = false; $save = $this->template->has_nocache_code; $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode("<?php echo '?>';?>\n", $this->compiler, true)); $this->template->has_nocache_code = $save; } elseif ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '?<?php ?>>'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars('?>', ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('?>', true)); } elseif ($this->php_handling == Smarty::PHP_REMOVE) { $this->_retvalue = new _smarty_text($this, ''); } } function yy_r9(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars($this->yystack[$this->yyidx + 0]->minor, ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if ($this->asp_tags) { if (!($this->smarty instanceof SmartyBC)) { $this->compiler->trigger_template_error (self::Err3); } $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('<%', true)); } else { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } } elseif ($this->php_handling == Smarty::PHP_REMOVE) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, ''); } else { $this->_retvalue = new _smarty_text($this, '<<?php ?>%'); } } } function yy_r10(){ if ($this->php_handling == Smarty::PHP_PASSTHRU) { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } elseif ($this->php_handling == Smarty::PHP_QUOTE) { $this->_retvalue = new _smarty_text($this, htmlspecialchars('%>', ENT_QUOTES)); } elseif ($this->php_handling == Smarty::PHP_ALLOW) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode('%>', true)); } else { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } } elseif ($this->php_handling == Smarty::PHP_REMOVE) { if ($this->asp_tags) { $this->_retvalue = new _smarty_text($this, ''); } else { $this->_retvalue = new _smarty_text($this, '%<?php ?>>'); } } } function yy_r11(){ if ($this->strip) { $this->_retvalue = new _smarty_text($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor))); } else { $this->_retvalue = new _smarty_text($this, self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor)); } } function yy_r12(){ $this->compiler->tag_nocache = true; $this->is_xml = true; $save = $this->template->has_nocache_code; $this->_retvalue = new _smarty_text($this, $this->compiler->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true)); $this->template->has_nocache_code = $save; } function yy_r13(){ if ($this->strip) { $this->_retvalue = new _smarty_text($this, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor)); } else { $this->_retvalue = new _smarty_text($this, $this->yystack[$this->yyidx + 0]->minor); } } function yy_r14(){ $this->strip = true; $this->_retvalue = new _smarty_text($this, ''); } function yy_r15(){ $this->strip = false; $this->_retvalue = new _smarty_text($this, ''); } function yy_r16(){ $this->_retvalue = ''; } function yy_r17(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; } function yy_r18(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r20(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor; } function yy_r22(){ $this->_retvalue = self::escape_start_tag($this->yystack[$this->yyidx + 0]->minor); } function yy_r24(){ $this->_retvalue = self::escape_end_tag($this->yystack[$this->yyidx + 0]->minor); } function yy_r25(){ $this->_retvalue = '<<?php ?>%'; } function yy_r26(){ $this->_retvalue = '%<?php ?>>'; } function yy_r27(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r28(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -3]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -2]->minor)); } function yy_r29(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor)); } function yy_r30(){ $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + -1]->minor,array('value'=>$this->yystack[$this->yyidx + -3]->minor,'modifierlist'=>$this->yystack[$this->yyidx + -2]->minor)); } function yy_r32(){ $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'"))); } function yy_r34(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -2]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -4]->minor."'")),$this->yystack[$this->yyidx + -1]->minor)); } function yy_r35(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -2]->minor),array('var'=>$this->yystack[$this->yyidx + -4]->minor['var'])),$this->yystack[$this->yyidx + -1]->minor),array('smarty_internal_index'=>$this->yystack[$this->yyidx + -4]->minor['smarty_internal_index'])); } function yy_r36(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + -1]->minor); } function yy_r37(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,array()); } function yy_r38(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor)); } function yy_r39(){ $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + -1]->minor).'<?php echo '; $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -2]->minor,'value'=>'ob_get_clean()')).'?>'; } function yy_r40(){ $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -5]->minor,$this->yystack[$this->yyidx + -1]->minor,array('object_methode'=>$this->yystack[$this->yyidx + -3]->minor)).'<?php echo '; $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -2]->minor,'value'=>'ob_get_clean()')).'?>'; } function yy_r41(){ $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r42(){ $tag = trim(substr($this->yystack[$this->yyidx + -3]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + -1]->minor,array('if condition'=>$this->yystack[$this->yyidx + -2]->minor)); } function yy_r43(){ $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length)); $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r45(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -10]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -7]->minor),array('var'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -2]->minor))),1); } function yy_r46(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor; } function yy_r48(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -4]->minor),array('to'=>$this->yystack[$this->yyidx + -2]->minor))),0); } function yy_r49(){ $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('start'=>$this->yystack[$this->yyidx + -6]->minor),array('to'=>$this->yystack[$this->yyidx + -4]->minor),array('step'=>$this->yystack[$this->yyidx + -2]->minor))),0); } function yy_r50(){ $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + -1]->minor); } function yy_r51(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -5]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor)))); } function yy_r52(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -8]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor),array('key'=>$this->yystack[$this->yyidx + -5]->minor)))); } function yy_r53(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -5]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor)))); } function yy_r54(){ $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + -1]->minor,array(array('from'=>$this->yystack[$this->yyidx + -8]->minor),array('item'=>$this->yystack[$this->yyidx + -2]->minor),array('key'=>$this->yystack[$this->yyidx + -5]->minor)))); } function yy_r55(){ $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)))); } function yy_r56(){ $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -3]->minor),$this->yystack[$this->yyidx + -2]->minor)),$this->yystack[$this->yyidx + -1]->minor))); } function yy_r57(){ $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler); } function yy_r58(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array()); } function yy_r59(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r60(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r61(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor.'close',array(),array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor, 'modifier_list'=>$this->yystack[$this->yyidx + -1]->minor)); } function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor; } function yy_r63(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor); } function yy_r64(){ $this->_retvalue = array(); } function yy_r65(){ if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'true'); } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'false'); } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>'null'); } else { $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'"); } } function yy_r66(){ $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor); } function yy_r68(){ $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'"; } function yy_r71(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor); } function yy_r73(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor; } function yy_r74(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor); } function yy_r79(){ $this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')'; } function yy_r80(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor; } function yy_r84(){ $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor)); } function yy_r85(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r86(){ $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r87(){ $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r89(){ $this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r90(){ $this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r91(){ $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')'; } function yy_r92(){ $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')'; } function yy_r93(){ $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r94(){ $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')'; } function yy_r100(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number; } function yy_r101(){ $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor; } function yy_r102(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor; } function yy_r105(){ $this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r110(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r111(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'; } function yy_r112(){ $this->_retvalue = '.'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r113(){ if (preg_match('~^true$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'true'; } elseif (preg_match('~^false$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'false'; } elseif (preg_match('~^null$~i', $this->yystack[$this->yyidx + 0]->minor)) { $this->_retvalue = 'null'; } else { $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'"; } } function yy_r115(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")"; } function yy_r118(){ if (!$this->security || isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor]) || $this->smarty->security_policy->isTrustedStaticClass($this->yystack[$this->yyidx + -2]->minor, $this->compiler)) { if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor])) { $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor].'::'.$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor; } } else { $this->compiler->trigger_template_error ("static class '".$this->yystack[$this->yyidx + -2]->minor."' is undefined or not allowed by security setting"); } } function yy_r119(){ if ($this->yystack[$this->yyidx + -2]->minor['var'] == '\'smarty\'') { $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index']).'::'.$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']).$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index'].'::'.$this->yystack[$this->yyidx + 0]->minor; } } function yy_r120(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number; } function yy_r122(){ if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $smarty_var = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']); $this->_retvalue = $smarty_var; } else { $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var']; $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']; $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']).$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']; } } function yy_r123(){ $this->_retvalue = '$_smarty_tpl->tpl_vars['. $this->yystack[$this->yyidx + -2]->minor .']->'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r125(){ $this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')'; } function yy_r126(){ $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'\')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' :null)'; } function yy_r127(){ $this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')'; } function yy_r128(){ $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -2]->minor .')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' : null)'; } function yy_r129(){ $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor); } function yy_r131(){ return; } function yy_r132(){ $this->_retvalue = '['.$this->compileVariable($this->yystack[$this->yyidx + 0]->minor).']'; } function yy_r133(){ $this->_retvalue = '['.$this->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor.']'; } function yy_r134(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']"; } function yy_r135(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]"; } function yy_r136(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]"; } function yy_r137(){ $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']'; } function yy_r138(){ $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']'; } function yy_r140(){ $this->_retvalue = '[]'; } function yy_r142(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r143(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\''; } function yy_r144(){ $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')'; } function yy_r145(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']).$this->yystack[$this->yyidx + 0]->minor; } else { $this->_retvalue = $this->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']).$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index'].$this->yystack[$this->yyidx + 0]->minor; } } function yy_r146(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor; } function yy_r147(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r148(){ if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) == '_') { $this->compiler->trigger_template_error (self::Err1); } $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r149(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{'.$this->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}'; } function yy_r150(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}'; } function yy_r151(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}'; } function yy_r152(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r153(){ if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) { if (strcasecmp($this->yystack[$this->yyidx + -3]->minor,'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) { $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor); if ($func_name == 'isset') { if (count($this->yystack[$this->yyidx + -1]->minor) == 0) { $this->compiler->trigger_template_error ('Illegal number of paramer in "isset()"'); } $par = implode(',',$this->yystack[$this->yyidx + -1]->minor); if (strncasecmp($par,'$_smarty_tpl->getConfigVariable',strlen('$_smarty_tpl->getConfigVariable')) === 0) { $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.str_replace(')',', false)',$par).';?>'; $isset_par = '$_tmp'.$this->prefix_number; } else { $isset_par=str_replace("')->value","',null,true,false)->value",$par); } $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")"; } elseif (in_array($func_name,array('empty','reset','current','end','prev','next'))){ if (count($this->yystack[$this->yyidx + -1]->minor) != 1) { $this->compiler->trigger_template_error ('Illegal number of paramer in "empty()"'); } if ($func_name == 'empty') { $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$this->yystack[$this->yyidx + -1]->minor[0]).')'; } else { $this->_retvalue = $func_name.'('.$this->yystack[$this->yyidx + -1]->minor[0].')'; } } else { $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")"; } } else { $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\""); } } } function yy_r154(){ if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') { $this->compiler->trigger_template_error (self::Err1); } $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")"; } function yy_r155(){ if ($this->security) { $this->compiler->trigger_template_error (self::Err2); } $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").';?>'; $this->_retvalue = '$_tmp'.$this->prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')'; } function yy_r156(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor)); } function yy_r159(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor))); } function yy_r160(){ $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)); } function yy_r162(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor); } function yy_r163(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor); } function yy_r170(){ $this->_retvalue = '$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r171(){ $this->_retvalue = '$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor; } function yy_r172(){ $this->_retvalue = '=='; } function yy_r173(){ $this->_retvalue = '!='; } function yy_r174(){ $this->_retvalue = '>'; } function yy_r175(){ $this->_retvalue = '<'; } function yy_r176(){ $this->_retvalue = '>='; } function yy_r177(){ $this->_retvalue = '<='; } function yy_r178(){ $this->_retvalue = '==='; } function yy_r179(){ $this->_retvalue = '!=='; } function yy_r180(){ $this->_retvalue = '%'; } function yy_r181(){ $this->_retvalue = '&&'; } function yy_r182(){ $this->_retvalue = '||'; } function yy_r183(){ $this->_retvalue = ' XOR '; } function yy_r184(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')'; } function yy_r186(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor; } function yy_r188(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r189(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor; } function yy_r191(){ $this->_retvalue = "''"; } function yy_r192(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php(); } function yy_r193(){ $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor); $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor; } function yy_r194(){ $this->_retvalue = new _smarty_doublequoted($this, $this->yystack[$this->yyidx + 0]->minor); } function yy_r195(){ $this->_retvalue = new _smarty_code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor); } function yy_r197(){ $this->_retvalue = new _smarty_code($this, '(string)$_smarty_tpl->tpl_vars[\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\']->value'); } function yy_r199(){ $this->_retvalue = new _smarty_code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')'); } function yy_r200(){ $this->_retvalue = new _smarty_tag($this, $this->yystack[$this->yyidx + 0]->minor); } function yy_r201(){ $this->_retvalue = new _smarty_dq_content($this, $this->yystack[$this->yyidx + 0]->minor); } private $_retvalue; function yy_reduce($yyruleno) { $yymsp = $this->yystack[$this->yyidx]; if (self::$yyTraceFILE && $yyruleno >= 0 && $yyruleno < count(self::$yyRuleName)) { fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n", self::$yyTracePrompt, $yyruleno, self::$yyRuleName[$yyruleno]); } $this->_retvalue = $yy_lefthand_side = null; if (array_key_exists($yyruleno, self::$yyReduceMap)) { $this->_retvalue = null; $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}(); $yy_lefthand_side = $this->_retvalue; } $yygoto = self::$yyRuleInfo[$yyruleno]['lhs']; $yysize = self::$yyRuleInfo[$yyruleno]['rhs']; $this->yyidx -= $yysize; for($i = $yysize; $i; $i--) { array_pop($this->yystack); } $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto); if ($yyact < self::YYNSTATE) { if (!self::$yyTraceFILE && $yysize) { $this->yyidx++; $x = new TP_yyStackEntry; $x->stateno = $yyact; $x->major = $yygoto; $x->minor = $yy_lefthand_side; $this->yystack[$this->yyidx] = $x; } else { $this->yy_shift($yyact, $yygoto, $yy_lefthand_side); } } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) { $this->yy_accept(); } } function yy_parse_failed() { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $this->yy_pop_parser_stack(); } } function yy_syntax_error($yymajor, $TOKEN) { $this->internalError = true; $this->yymajor = $yymajor; $this->compiler->trigger_template_error(); } function yy_accept() { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt); } while ($this->yyidx >= 0) { $stack = $this->yy_pop_parser_stack(); } $this->successful = !$this->internalError; $this->internalError = false; $this->retvalue = $this->_retvalue; } function doParse($yymajor, $yytokenvalue) { $yyerrorhit = 0; if ($this->yyidx === null || $this->yyidx < 0) { $this->yyidx = 0; $this->yyerrcnt = -1; $x = new TP_yyStackEntry; $x->stateno = 0; $x->major = 0; $this->yystack = array(); array_push($this->yystack, $x); } $yyendofinput = ($yymajor==0); if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sInput %s\n", self::$yyTracePrompt, $this->yyTokenName[$yymajor]); } do { $yyact = $this->yy_find_shift_action($yymajor); if ($yymajor < self::YYERRORSYMBOL && !$this->yy_is_expected_token($yymajor)) { $yyact = self::YY_ERROR_ACTION; } if ($yyact < self::YYNSTATE) { $this->yy_shift($yyact, $yymajor, $yytokenvalue); $this->yyerrcnt--; if ($yyendofinput && $this->yyidx >= 0) { $yymajor = 0; } else { $yymajor = self::YYNOCODE; } } elseif ($yyact < self::YYNSTATE + self::YYNRULE) { $this->yy_reduce($yyact - self::YYNSTATE); } elseif ($yyact == self::YY_ERROR_ACTION) { if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sSyntax Error!\n", self::$yyTracePrompt); } if (self::YYERRORSYMBOL) { if ($this->yyerrcnt < 0) { $this->yy_syntax_error($yymajor, $yytokenvalue); } $yymx = $this->yystack[$this->yyidx]->major; if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){ if (self::$yyTraceFILE) { fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n", self::$yyTracePrompt, $this->yyTokenName[$yymajor]); } $this->yy_destructor($yymajor, $yytokenvalue); $yymajor = self::YYNOCODE; } else { while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE ){ $this->yy_pop_parser_stack(); } if ($this->yyidx < 0 || $yymajor==0) { $this->yy_destructor($yymajor, $yytokenvalue); $this->yy_parse_failed(); $yymajor = self::YYNOCODE; } elseif ($yymx != self::YYERRORSYMBOL) { $u2 = 0; $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2); } } $this->yyerrcnt = 3; $yyerrorhit = 1; } else { if ($this->yyerrcnt <= 0) { $this->yy_syntax_error($yymajor, $yytokenvalue); } $this->yyerrcnt = 3; $this->yy_destructor($yymajor, $yytokenvalue); if ($yyendofinput) { $this->yy_parse_failed(); } $yymajor = self::YYNOCODE; } } else { $this->yy_accept(); $yymajor = self::YYNOCODE; } } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0); } } 