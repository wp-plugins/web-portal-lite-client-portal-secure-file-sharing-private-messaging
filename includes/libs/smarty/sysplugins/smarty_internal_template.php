<?php
 class Smarty_Internal_Template extends Smarty_Internal_TemplateBase { public $cache_id = null; public $compile_id = null; public $caching = null; public $cache_lifetime = null; public $template_resource = null; public $mustCompile = null; public $has_nocache_code = false; public $properties = array('file_dependency' => array(), 'nocache_hash' => '', 'function' => array()); public $required_plugins = array('compiled' => array(), 'nocache' => array()); public $smarty = null; public $block_data = array(); public $variable_filters = array(); public $used_tags = array(); public $allow_relative_path = false; public $_capture_stack = array(0 => array()); public function __construct($template_resource, $smarty, $_parent = null, $_cache_id = null, $_compile_id = null, $_caching = null, $_cache_lifetime = null) { $this->smarty = &$smarty; $this->cache_id = $_cache_id === null ? $this->smarty->cache_id : $_cache_id; $this->compile_id = $_compile_id === null ? $this->smarty->compile_id : $_compile_id; $this->caching = $_caching === null ? $this->smarty->caching : $_caching; if ($this->caching === true) $this->caching = Smarty::CACHING_LIFETIME_CURRENT; $this->cache_lifetime = $_cache_lifetime === null ? $this->smarty->cache_lifetime : $_cache_lifetime; $this->parent = $_parent; $this->template_resource = $template_resource; if ($this->parent instanceof Smarty_Internal_Template) { $this->block_data = $this->parent->block_data; } } public function mustCompile() { if (!$this->source->exists) { if ($this->parent instanceof Smarty_Internal_Template) { $parent_resource = " in '$this->parent->template_resource}'"; } else { $parent_resource = ''; } throw new SmartyException("Unable to load template {$this->source->type} '{$this->source->name}'{$parent_resource}"); } if ($this->mustCompile === null) { $this->mustCompile = (!$this->source->uncompiled && ($this->smarty->force_compile || $this->source->recompiled || $this->compiled->timestamp === false || ($this->smarty->compile_check && $this->compiled->timestamp < $this->source->timestamp))); } return $this->mustCompile; } public function compileTemplateSource() { if (!$this->source->recompiled) { $this->properties['file_dependency'] = array(); if ($this->source->components) { $source = end($this->source->components); $this->properties['file_dependency'][$this->source->uid] = array($this->source->filepath, $this->source->timestamp, $source->type); } else { $this->properties['file_dependency'][$this->source->uid] = array($this->source->filepath, $this->source->timestamp, $this->source->type); } } if ($this->smarty->debugging) { Smarty_Internal_Debug::start_compile($this); } if ($this->smarty->compile_locking && !$this->source->recompiled) { if ($saved_timestamp = $this->compiled->timestamp) { touch($this->compiled->filepath); } } try { $code = $this->compiler->compileTemplate($this); } catch (Exception $e) { if ($this->smarty->compile_locking && !$this->source->recompiled && $saved_timestamp) { touch($this->compiled->filepath, $saved_timestamp); } throw $e; } if (!$this->source->recompiled && $this->compiler->write_compiled_code) { $_filepath = $this->compiled->filepath; if ($_filepath === false) throw new SmartyException('getCompiledFilepath() did not return a destination to save the compiled template to'); Smarty_Internal_Write_File::writeFile($_filepath, $code, $this->smarty); $this->compiled->exists = true; $this->compiled->isCompiled = true; } if ($this->smarty->debugging) { Smarty_Internal_Debug::end_compile($this); } unset($this->compiler); } public function writeCachedContent($content) { if ($this->source->recompiled || !($this->caching == Smarty::CACHING_LIFETIME_CURRENT || $this->caching == Smarty::CACHING_LIFETIME_SAVED)) { return false; } $this->properties['cache_lifetime'] = $this->cache_lifetime; $this->properties['unifunc'] = 'content_' . str_replace('.', '_', uniqid('', true)); $content = $this->createTemplateCodeFrame($content, true); $_smarty_tpl = $this; eval("?>" . $content); $this->cached->valid = true; $this->cached->processed = true; return $this->cached->write($this, $content); } public function getSubTemplate($template, $cache_id, $compile_id, $caching, $cache_lifetime, $data, $parent_scope) { if ($this->smarty->allow_ambiguous_resources) { $_templateId = Smarty_Resource::getUniqueTemplateName($this->smarty, $template) . $cache_id . $compile_id; } else { $_templateId = $this->smarty->joined_template_dir . '#' . $template . $cache_id . $compile_id; } if (isset($_templateId[150])) { $_templateId = sha1($_templateId); } if (isset($this->smarty->template_objects[$_templateId])) { $tpl = clone $this->smarty->template_objects[$_templateId]; $tpl->parent = $this; $tpl->caching = $caching; $tpl->cache_lifetime = $cache_lifetime; } else { $tpl = new $this->smarty->template_class($template, $this->smarty, $this, $cache_id, $compile_id, $caching, $cache_lifetime); } if ($parent_scope == Smarty::SCOPE_LOCAL) { $tpl->tpl_vars = $this->tpl_vars; $tpl->tpl_vars['smarty'] = clone $this->tpl_vars['smarty']; } elseif ($parent_scope == Smarty::SCOPE_PARENT) { $tpl->tpl_vars = &$this->tpl_vars; } elseif ($parent_scope == Smarty::SCOPE_GLOBAL) { $tpl->tpl_vars = &Smarty::$global_tpl_vars; } elseif (($scope_ptr = $this->getScopePointer($parent_scope)) == null) { $tpl->tpl_vars = &$this->tpl_vars; } else { $tpl->tpl_vars = &$scope_ptr->tpl_vars; } $tpl->config_vars = $this->config_vars; if (!empty($data)) { foreach ($data as $_key => $_val) { $tpl->tpl_vars[$_key] = new Smarty_variable($_val); } } return $tpl->fetch(null, null, null, null, false, false, true); } public function setupInlineSubTemplate($template, $cache_id, $compile_id, $caching, $cache_lifetime, $data, $parent_scope, $hash) { $tpl = new $this->smarty->template_class($template, $this->smarty, $this, $cache_id, $compile_id, $caching, $cache_lifetime); $tpl->properties['nocache_hash'] = $hash; if ($parent_scope == Smarty::SCOPE_LOCAL ) { $tpl->tpl_vars = $this->tpl_vars; $tpl->tpl_vars['smarty'] = clone $this->tpl_vars['smarty']; } elseif ($parent_scope == Smarty::SCOPE_PARENT) { $tpl->tpl_vars = &$this->tpl_vars; } elseif ($parent_scope == Smarty::SCOPE_GLOBAL) { $tpl->tpl_vars = &Smarty::$global_tpl_vars; } elseif (($scope_ptr = $this->getScopePointer($parent_scope)) == null) { $tpl->tpl_vars = &$this->tpl_vars; } else { $tpl->tpl_vars = &$scope_ptr->tpl_vars; } $tpl->config_vars = $this->config_vars; if (!empty($data)) { foreach ($data as $_key => $_val) { $tpl->tpl_vars[$_key] = new Smarty_variable($_val); } } return $tpl; } public function createTemplateCodeFrame($content = '', $cache = false) { $plugins_string = ''; if (!$cache) { if (!empty($this->required_plugins['compiled'])) { $plugins_string = '<?php '; foreach ($this->required_plugins['compiled'] as $tmp) { foreach ($tmp as $data) { $file = addslashes($data['file']); if (is_Array($data['function'])){ $plugins_string .= "if (!is_callable(array('{$data['function'][0]}','{$data['function'][1]}'))) include '{$file}';\n"; } else { $plugins_string .= "if (!is_callable('{$data['function']}')) include '{$file}';\n"; } } } $plugins_string .= '?>'; } if (!empty($this->required_plugins['nocache'])) { $this->has_nocache_code = true; $plugins_string .= "<?php echo '/*%%SmartyNocache:{$this->properties['nocache_hash']}%%*/<?php \$_smarty = \$_smarty_tpl->smarty; "; foreach ($this->required_plugins['nocache'] as $tmp) { foreach ($tmp as $data) { $file = addslashes($data['file']); if (is_Array($data['function'])){ $plugins_string .= addslashes("if (!is_callable(array('{$data['function'][0]}','{$data['function'][1]}'))) include '{$file}';\n"); } else { $plugins_string .= addslashes("if (!is_callable('{$data['function']}')) include '{$file}';\n"); } } } $plugins_string .= "?>/*/%%SmartyNocache:{$this->properties['nocache_hash']}%%*/';?>\n"; } } $this->properties['has_nocache_code'] = $this->has_nocache_code; $output = ''; if (!$this->source->recompiled) { $output = "<?php /*%%SmartyHeaderCode:{$this->properties['nocache_hash']}%%*/"; if ($this->smarty->direct_access_security) { $output .= "if(!defined('SMARTY_DIR')) exit('no direct access allowed');\n"; } } if ($cache) { unset($this->properties['function']); if (!empty($this->smarty->template_functions)) { foreach ($this->smarty->template_functions as $name => $function_data) { if (isset($function_data['called_nocache'])) { foreach ($function_data['called_functions'] as $func_name) { $this->smarty->template_functions[$func_name]['called_nocache'] = true; } } } foreach ($this->smarty->template_functions as $name => $function_data) { if (isset($function_data['called_nocache'])) { unset($function_data['called_nocache'], $function_data['called_functions'], $this->smarty->template_functions[$name]['called_nocache']); $this->properties['function'][$name] = $function_data; } } } } $this->properties['version'] = Smarty::SMARTY_VERSION; if (!isset($this->properties['unifunc'])) { $this->properties['unifunc'] = 'content_' . str_replace('.', '_', uniqid('', true)); } if (!$this->source->recompiled) { $output .= "\$_valid = \$_smarty_tpl->decodeProperties(" . var_export($this->properties, true) . ',' . ($cache ? 'true' : 'false') . "); /*/%%SmartyHeaderCode%%*/?>\n"; $output .= '<?php if ($_valid && !is_callable(\'' . $this->properties['unifunc'] . '\')) {function ' . $this->properties['unifunc'] . '($_smarty_tpl) {?>'; } $output .= $plugins_string; $output .= $content; if (!$this->source->recompiled) { $output .= '<?php }} ?>'; } return $output; } public function decodeProperties($properties, $cache = false) { $this->has_nocache_code = $properties['has_nocache_code']; $this->properties['nocache_hash'] = $properties['nocache_hash']; if (isset($properties['cache_lifetime'])) { $this->properties['cache_lifetime'] = $properties['cache_lifetime']; } if (isset($properties['file_dependency'])) { $this->properties['file_dependency'] = array_merge($this->properties['file_dependency'], $properties['file_dependency']); } if (!empty($properties['function'])) { $this->properties['function'] = array_merge($this->properties['function'], $properties['function']); $this->smarty->template_functions = array_merge($this->smarty->template_functions, $properties['function']); } $this->properties['version'] = (isset($properties['version'])) ? $properties['version'] : ''; $this->properties['unifunc'] = $properties['unifunc']; $is_valid = true; if ($this->properties['version'] != Smarty::SMARTY_VERSION) { $is_valid = false; } else if (((!$cache && $this->smarty->compile_check && empty($this->compiled->_properties) && !$this->compiled->isCompiled) || $cache && ($this->smarty->compile_check === true || $this->smarty->compile_check === Smarty::COMPILECHECK_ON)) && !empty($this->properties['file_dependency'])) { foreach ($this->properties['file_dependency'] as $_file_to_check) { if ($_file_to_check[2] == 'file' || $_file_to_check[2] == 'php') { if ($this->source->filepath == $_file_to_check[0] && isset($this->source->timestamp)) { $mtime = $this->source->timestamp; } else { $mtime = @filemtime($_file_to_check[0]); } } elseif ($_file_to_check[2] == 'string') { continue; } else { $source = Smarty_Resource::source(null, $this->smarty, $_file_to_check[0]); $mtime = $source->timestamp; } if (!$mtime || $mtime > $_file_to_check[1]) { $is_valid = false; break; } } } if ($cache) { $this->cached->valid = $is_valid; } else { $this->mustCompile = !$is_valid; } if (!$cache) { $this->compiled->_properties = $properties; } return $is_valid; } public function createLocalArrayVariable($tpl_var, $nocache = false, $scope = Smarty::SCOPE_LOCAL) { if (!isset($this->tpl_vars[$tpl_var])) { $this->tpl_vars[$tpl_var] = new Smarty_variable(array(), $nocache, $scope); } else { $this->tpl_vars[$tpl_var] = clone $this->tpl_vars[$tpl_var]; if ($scope != Smarty::SCOPE_LOCAL) { $this->tpl_vars[$tpl_var]->scope = $scope; } if (!(is_array($this->tpl_vars[$tpl_var]->value) || $this->tpl_vars[$tpl_var]->value instanceof ArrayAccess)) { settype($this->tpl_vars[$tpl_var]->value, 'array'); } } } public function &getScope($scope) { if ($scope == Smarty::SCOPE_PARENT && !empty($this->parent)) { return $this->parent->tpl_vars; } elseif ($scope == Smarty::SCOPE_ROOT && !empty($this->parent)) { $ptr = $this->parent; while (!empty($ptr->parent)) { $ptr = $ptr->parent; } return $ptr->tpl_vars; } elseif ($scope == Smarty::SCOPE_GLOBAL) { return Smarty::$global_tpl_vars; } $null = null; return $null; } public function getScopePointer($scope) { if ($scope == Smarty::SCOPE_PARENT && !empty($this->parent)) { return $this->parent; } elseif ($scope == Smarty::SCOPE_ROOT && !empty($this->parent)) { $ptr = $this->parent; while (!empty($ptr->parent)) { $ptr = $ptr->parent; } return $ptr; } return null; } public function _count($value) { if (is_array($value) === true || $value instanceof Countable) { return count($value); } elseif ($value instanceof IteratorAggregate) { return iterator_count($value->getIterator()); } elseif ($value instanceof Iterator) { return iterator_count($value); } elseif ($value instanceof PDOStatement) { return $value->rowCount(); } elseif ($value instanceof Traversable) { return iterator_count($value); } elseif ($value instanceof ArrayAccess) { if ($value->offsetExists(0)) { return 1; } } elseif (is_object($value)) { return count($value); } return 0; } public function capture_error() { throw new SmartyException("Not matching {capture} open/close in \"{$this->template_resource}\""); } public function clearCache($exp_time=null) { Smarty_CacheResource::invalidLoadedCache($this->smarty); return $this->cached->handler->clear($this->smarty, $this->template_name, $this->cache_id, $this->compile_id, $exp_time); } public function __set($property_name, $value) { switch ($property_name) { case 'source': case 'compiled': case 'cached': case 'compiler': $this->$property_name = $value; return; default: if (property_exists($this->smarty, $property_name)) { $this->smarty->$property_name = $value; return; } } throw new SmartyException("invalid template property '$property_name'."); } public function __get($property_name) { switch ($property_name) { case 'source': if (strlen($this->template_resource) == 0) { throw new SmartyException('Missing template name'); } $this->source = Smarty_Resource::source($this); if ($this->source->type != 'eval') { if ($this->smarty->allow_ambiguous_resources) { $_templateId = $this->source->unique_resource . $this->cache_id . $this->compile_id; } else { $_templateId = $this->smarty->joined_template_dir . '#' . $this->template_resource . $this->cache_id . $this->compile_id; } if (isset($_templateId[150])) { $_templateId = sha1($_templateId); } $this->smarty->template_objects[$_templateId] = $this; } return $this->source; case 'compiled': $this->compiled = $this->source->getCompiled($this); return $this->compiled; case 'cached': if (!class_exists('Smarty_Template_Cached')) { include SMARTY_SYSPLUGINS_DIR . 'smarty_cacheresource.php'; } $this->cached = new Smarty_Template_Cached($this); return $this->cached; case 'compiler': $this->smarty->loadPlugin($this->source->compiler_class); $this->compiler = new $this->source->compiler_class($this->source->template_lexer_class, $this->source->template_parser_class, $this->smarty); return $this->compiler; default: if (property_exists($this->smarty, $property_name)) { return $this->smarty->$property_name; } } throw new SmartyException("template property '$property_name' does not exist."); } public function __destruct() { if ($this->smarty->cache_locking && isset($this->cached) && $this->cached->is_locked) { $this->cached->handler->releaseLock($this->smarty, $this->cached); } } } ?>